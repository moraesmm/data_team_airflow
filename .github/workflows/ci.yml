name: CI - Airflow

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

permissions:
  contents: read

jobs:
  unit-tests:
    name: Unit tests (parse DAGs com Airflow 2.0.2)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python 3.8
        uses: actions/setup-python@v5
        with:
          python-version: '3.8'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}-py38-airflow-2.0.2
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Airflow + pytest (com constraints)
        env:
          CONSTRAINT_URL: https://raw.githubusercontent.com/apache/airflow/constraints-2.0.2/constraints-3.8.txt
        run: |
          python -m pip install --upgrade pip
          pip install --constraint ${CONSTRAINT_URL} "apache-airflow==2.0.2" pytest pytest-cov

      - name: Run pytest (verbose + junit)
        env:
          AIRFLOW__CORE__LOAD_EXAMPLES: "false"
        run: |
          pytest -vv --maxfail=1 --junitxml=pytest-report.xml \
            --cov=dags --cov-report=term-missing

      - name: Upload pytest report
        uses: actions/upload-artifact@v4
        with:
          name: pytest-report
          path: pytest-report.xml

      - name: Summary (unit tests)
        run: |
          python - <<'PY' | tee -a "$GITHUB_STEP_SUMMARY"
          import xml.etree.ElementTree as ET
          t = ET.parse('pytest-report.xml').getroot()
          total = int(t.attrib.get('tests', '0'))
          failures = int(t.attrib.get('failures', '0'))
          errors = int(t.attrib.get('errors', '0'))
          skipped = int(t.attrib.get('skipped', '0'))
          passed = total - failures - errors - skipped
          print("## Unit tests")
          print(f"- Total: {total}")
          print(f"- Passed: {passed}")
          print(f"- Failures: {failures}")
          print(f"- Errors: {errors}")
          print(f"- Skipped: {skipped}")
          PY

  docker-build:
    name: Build da imagem e smoke test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Airflow image (sem push)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: false
          load: true              # importante para o docker run funcionar depois
          tags: my-airflow:ci
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Smoke test - parse DAGs dentro da imagem
        run: |
          docker run --rm \
            -e AIRFLOW__CORE__LOAD_EXAMPLES=false \
            -v "$PWD/dags:/opt/airflow/dags" \
            my-airflow:ci \
            python - <<'PY' | tee smoke.txt
          from airflow.models import DagBag
          b = DagBag(dag_folder="/opt/airflow/dags", include_examples=False)
          print("DAGs:", len(b.dags))
          for dag_id in sorted(b.dags):
              print(" -", dag_id)
          if b.import_errors:
              print("Import errors:", b.import_errors)
              raise SystemExit(1)
          PY

      - name: Summary (docker build + smoke)
        run: |
          {
            echo "## Docker image & smoke"
            echo ""
            echo "**Imagem:** \`my-airflow:ci\`"
            echo ""
            echo "### Resultado do smoke"
            sed -n '1,80p' smoke.txt
          } >> "$GITHUB_STEP_SUMMARY"

  compose-validate:
    name: Validar docker-compose.yaml
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: docker compose config
        run: docker compose -f docker-compose.yaml config > compose.out

      - name: Summary (compose)
        run: |
          echo "## docker-compose.yaml" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "Validação: **OK** (arquivo renderizou com \`docker compose config\`)." >> "$GITHUB_STEP_SUMMARY"
